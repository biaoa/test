<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.linle.BroadbandFee.mapper.BroadbandFeeMapper">
	<resultMap id="BaseResultMap" type="com.linle.entity.sys.BroadbandFee">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="community_id" property="communityId" jdbcType="BIGINT" />
		<result column="house_owner" property="houseOwner" jdbcType="VARCHAR" />
		<result column="house_number" property="houseNumber" jdbcType="VARCHAR" />
		<result column="payable" property="payable" jdbcType="DECIMAL" />
		<result column="year" property="year" jdbcType="INTEGER" />
		<result column="month" property="month" jdbcType="INTEGER" />
		<result column="status" property="status" jdbcType="INTEGER" />
		<result column="type" property="type" jdbcType="INTEGER" />
		<result column="order_no" property="orderNo" jdbcType="VARCHAR" />
		<result column="detail" property="detail" jdbcType="VARCHAR" />
		<result column="fee_time" property="feeTime" jdbcType="VARCHAR" />
		<result column="broadband_json" property="broadbandJson" jdbcType="LONGVARCHAR" />
		<result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
		<result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
		<result column="pay_date" property="payDate"/>
	</resultMap>
	
	<resultMap type="BroadbandFeeRES" id="BroadbandFeeForAPPResult">
		<result column="order_no" property="orderNo"/>
		<result column="name" property="communityName"/>
		<result column="house_number" property="houseNumber"/>
		<result column="payable" property="payable"/>
		<result column="fee_time" property="feeTime"/>
		<result column="status" property="status"/>
	</resultMap>
	
	<resultMap type="com.linle.entity.vo.BroadbandFeeVO" id="BroadbandFeeExportVOUsersResult">
		<result column="name" property="name"/>
		<result column="houseNumber" property="houseNumber"/>
		<result column="payable" property="payable"/>
	</resultMap>
	
	
	<sql id="Base_Column_List">
		id, community_id, house_owner, house_number, payable, year, month,
		status, type,
		order_no, detail, fee_time,broadband_json,create_date,update_date,pay_date
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Long">
		select
		<include refid="Base_Column_List" />
		from broadband_fee
		where id = #{id,jdbcType=BIGINT}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from broadband_fee
		where id = #{id,jdbcType=BIGINT}
	</delete>
	<insert id="insert" parameterType="com.linle.entity.sys.BroadbandFee">
		insert into broadband_fee (id, community_id, house_owner,
		house_number, payable, year,
		month, status, type,
		order_no, detail, fee_time,create_date,update_date,pay_date
		)
		values (#{id,jdbcType=BIGINT}, #{communityId,jdbcType=BIGINT},
		#{houseOwner,jdbcType=VARCHAR},
		#{houseNumber,jdbcType=VARCHAR}, #{payable,jdbcType=DECIMAL}, #{year,jdbcType=INTEGER},
		#{month,jdbcType=INTEGER}, #{status,jdbcType=INTEGER},
		#{type,jdbcType=INTEGER},
		#{orderNo,jdbcType=VARCHAR}, #{detail,jdbcType=VARCHAR}, #{feeTime,jdbcType=VARCHAR},
		#{createDate},#{updateDate},#{payDate}
		)
	</insert>
	<insert id="insertSelective"  parameterType="com.linle.entity.sys.BroadbandFee" useGeneratedKeys="true" keyProperty="id">
		insert into broadband_fee
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="communityId != null">
				community_id,
			</if>
			<if test="houseOwner != null">
				house_owner,
			</if>
			<if test="houseNumber != null">
				house_number,
			</if>
			<if test="payable != null">
				payable,
			</if>
			<if test="year != null">
				year,
			</if>
			<if test="month != null">
				month,
			</if>
			<if test="status != null">
				status,
			</if>
			<if test="type != null">
				type,
			</if>
			<if test="orderNo != null">
				order_no,
			</if>
			<if test="detail != null">
				detail,
			</if>
			<if test="feeTime != null">
				fee_time,
			</if>
			<if test="createDate !=null">
				create_date,
			</if>
			<if test="updateDate !=null">
				update_date,
			</if>
			<if test="payDate !=null">
				pay_date,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=BIGINT},
			</if>
			<if test="communityId != null">
				#{communityId,jdbcType=BIGINT},
			</if>
			<if test="houseOwner != null">
				#{houseOwner,jdbcType=VARCHAR},
			</if>
			<if test="houseNumber != null">
				#{houseNumber,jdbcType=VARCHAR},
			</if>
			<if test="payable != null">
				#{payable,jdbcType=DECIMAL},
			</if>
			<if test="year != null">
				#{year,jdbcType=INTEGER},
			</if>
			<if test="month != null">
				#{month,jdbcType=INTEGER},
			</if>
			<if test="status != null">
				#{status,jdbcType=INTEGER},
			</if>
			<if test="type != null">
				#{type,jdbcType=INTEGER},
			</if>
			<if test="orderNo != null">
				#{orderNo,jdbcType=VARCHAR},
			</if>
			<if test="detail != null">
				#{detail,jdbcType=VARCHAR},
			</if>
			<if test="feeTime != null">
				#{feeTime,jdbcType=VARCHAR},
			</if>
			<if test="createDate !=null">
				#{createDate},
			</if>
			<if test="updateDate !=null">
				#{updateDate},
			</if>
			<if test="payDate !=null">
				#{payDate},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.linle.entity.sys.BroadbandFee">
		update broadband_fee
		<set>
			<if test="communityId != null">
				community_id = #{communityId,jdbcType=BIGINT},
			</if>
			<if test="houseOwner != null">
				house_owner = #{houseOwner,jdbcType=VARCHAR},
			</if>
			<if test="houseNumber != null">
				house_number = #{houseNumber,jdbcType=VARCHAR},
			</if>
			<if test="payable != null">
				payable = #{payable,jdbcType=DECIMAL},
			</if>
			<if test="year != null">
				year = #{year,jdbcType=INTEGER},
			</if>
			<if test="month != null">
				month = #{month,jdbcType=INTEGER},
			</if>
			<if test="status != null">
				status = #{status,jdbcType=INTEGER},
			</if>
			<if test="type != null">
				type = #{type,jdbcType=INTEGER},
			</if>
			<if test="orderNo != null">
				order_no = #{orderNo,jdbcType=VARCHAR},
			</if>
			<if test="detail != null">
				detail = #{detail,jdbcType=VARCHAR},
			</if>
			<if test="feeTime != null">
				fee_time = #{feeTime,jdbcType=VARCHAR},
			</if>
			<if test="broadbandJson != null">
				broadband_json = #{broadbandJson,jdbcType=VARCHAR},
			</if>
			<if test="createDate !=null">
				create_date = #{createDate},
			</if>
			<if test="updateDate !=null">
				update_date = #{updateDate},
			</if>
			<if test="payDate !=null">
				pay_date = #{payDate},
			</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.linle.entity.sys.BroadbandFee">
		update broadband_fee
		set community_id = #{communityId,jdbcType=BIGINT},
		house_owner = #{houseOwner,jdbcType=VARCHAR},
		house_number = #{houseNumber,jdbcType=VARCHAR},
		payable = #{payable,jdbcType=DECIMAL},
		year = #{year,jdbcType=INTEGER},
		month = #{month,jdbcType=INTEGER},
		status = #{status,jdbcType=INTEGER},
		type = #{type,jdbcType=INTEGER},
		order_no = #{orderNo,jdbcType=VARCHAR},
		detail = #{detail,jdbcType=VARCHAR},
		fee_time = #{feeTime,jdbcType=VARCHAR},
		create_date = #{createDate},
		update_date = #{updateDate},
		pay_date = #{payDate}
		where id = #{id,jdbcType=BIGINT}
	</update>

	<select id="getAllData" parameterType="page" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from broadband_fee
		where community_id = #{params.community_id} and type = #{params.type}
		<if test="params !=null and params.status != null and params.status !='' and params.status ==2">
			and status in (2,3)
		</if>
		<if test="params !=null and params.status != null and params.status !='' and params.status !=2">
			and status = #{params.status}
		</if>
		<if test="params !=null and params.orderNo != null and params.orderNo !=''">
			and order_no = #{params.orderNo}
		</if>
		<if test="params !=null and params.year != null and params.year!=''">
			and year = #{params.year} and month = #{params.month}
		</if>
		<if test="params !=null and params.owner!= null and params.owner!=''">
			and house_owner = #{params.owner}
		</if>
		<if test="params.roomno !=null and params.roomno !=''">
    		and house_number = #{params.roomno}
    	</if>
	</select>
	
	<!-- 查询总数量：全部，待付款，线上缴费，线下缴费 -->
   <select id="getStatisticQuantity"  resultType="com.linle.entity.sys.BroadbandFee" parameterType="map">
		select SUM(temp.count) sumQuantity,
			sum(case temp.status when 1 then temp.count else 0 end) as 'waitQuantity',
			sum(case temp.status when 2 then temp.count else 0 end) as 'onlineQuantity',
			sum(case temp.status when 3 then temp.count else 0 end) as 'offlineQuantity'
		from (
			SELECT status,COUNT(*) count
			FROM broadband_fee WHERE community_id = #{community_id} and type = #{type}
		   	<if test="orderNo != null and orderNo !=''">
		   		and order_no = #{orderNo}
		   	</if>
		   	<if test="year != null and year!=''">
		   		and year = #{year} and month = #{month}
		   	</if>
		   	<if test="owner!= null and owner!=''">
		   		and house_owner =  #{owner}
		   	</if>
		   	<if test="roomno !=null and roomno !=''">
		   		and house_number = #{roomno}
		   	</if>
			GROUP BY `status`
		)temp
   </select>
   
	<select id="getRecentlyDate"  resultMap="BaseResultMap" parameterType="map">
   	 select 
    `year` ,`month`
    from broadband_fee
   where community_id = #{community_id} and type = #{type}
   ORDER BY `year` desc,`month`DESC
   limit 0,1
   </select>
   
	<select id="needMessage" parameterType="map" resultType="String">
			SELECT  users.id
    FROM  users
	INNER JOIN (
		SELECT room_no.id FROM broadband_fee 
		INNER JOIN room_no ON broadband_fee.community_id = room_no.community_id
		AND broadband_fee.house_number = room_no.overall
		where `year` = #{year} and `month`= #{month} and type=#{type} and `status`=1
	 )
 	AS tb1 
 	ON users.address_details = tb1.id and users.community_id = #{community_id}
	</select>
	
	<select id="getBroadbandFeeAPI" parameterType="map" resultMap="BroadbandFeeForAPPResult">
		SELECT `name`,house_number,payable,fee_time,broadband_fee.order_no,broadband_fee.status
	  	from broadband_fee
		left join community 
		on broadband_fee.community_id = community.id
		where broadband_fee.community_id=#{community_id} and 
		house_number = #{houseNumber} and type = #{type}
		ORDER BY broadband_fee.`status`,broadband_fee.`year` DESC,broadband_fee.`month` DESC
		LIMIT 0,1
	</select>
	
	 <!-- 判断该小区该月该房号是否有已上传过同房号记录 -->
	  <select id="getBroadbandFeeCount" parameterType="map" resultType="int">
	  	SELECT count(*)
	  	from broadband_fee
		left join community 
		on broadband_fee.community_id = community.id
		where broadband_fee.community_id=#{community_id} and 
		house_number = #{houseNumber}  and month = #{month} and year = #{year} and type = #{type}
	  </select>
	  

	<!-- 获得缴费业主 每个房号随意取一个用户-->
  <select id="getBroadbandFeeExportUsers" parameterType="map" resultMap="BroadbandFeeExportVOUsersResult">
	 SELECT `room`.id,user.name name,room.overall houseNumber,
		temp.payable 
		FROM room_no room 
		left JOIN users user on user.address_details=room.id and user.identity=4 and user.`status` !=2
			LEFT JOIN (
				SELECT house_owner,house_number,payable	
				from broadband_fee 
				WHERE type = #{type} and month =#{month} and year =#{year} and community_id=#{community_id}
				GROUP BY house_number
			)temp on  temp.house_number=room.overall
		WHERE room.community_id=#{community_id}
		GROUP BY room.id
  </select>
  
	<update id="paySuccessupdateStatus" parameterType="string">
		update broadband_fee
		set status = 2,update_date = now(),pay_date = now()
		where order_no = #{orderNo}
	</update>
	
	<update id="updateBroadbandJson" parameterType="com.linle.entity.sys.BroadbandFee">
		update broadband_fee
		set broadband_json = #{broadbandJson}
		where id = #{id}
	</update>
	
	<select id="selectByOrderNo" parameterType="string" resultMap="BaseResultMap">
			select
		<include refid="Base_Column_List" />
		from broadband_fee
		where order_no = #{orderNo}
	</select>
	
	<update id="updateStatusForOffline" parameterType="map" >
		update broadband_fee
		set status = 3,update_date = now(),pay_date = now()
		where community_id = #{communityId} and year = #{year} and month = #{month} and house_number = #{houseNumber} and type = #{type}
	</update>
	
	
  <select id="selectBroadbandFeeByHousenumber" parameterType="map" resultMap="BaseResultMap">
  	SELECT * FROM broadband_fee
	WHERE community_id=#{communityId} and order_no is not null and house_number IN (SELECT overall FROM room_no WHERE id=#{roomNoId} )
	GROUP BY year,`month`
  </select>
</mapper>