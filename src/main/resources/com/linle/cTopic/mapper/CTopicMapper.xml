<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.linle.cTopic.mapper.CTopicMapper" >
  <resultMap id="BaseResultMap" type="com.linle.entity.sys.CTopic" >
    <id column="topic_id" property="topicId" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="topic_content" property="topicContent" jdbcType="VARCHAR" />
    <result column="folder_id" property="folderId" jdbcType="BIGINT" />
    <result column="topic_type_id" property="topicTypeId" jdbcType="BIGINT" />
    <result column="support_num" property="supportNum" jdbcType="BIGINT" />
    <result column="comment_num" property="commentNum" jdbcType="BIGINT" />
    <result column="price" property="price" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="is_del" property="isDel" jdbcType="INTEGER" />
    <result column="is_top" property="isTop" jdbcType="INTEGER" />
    <association column="folder_id" property="folder" select="com.linle.system.mapper.SysFolderMapper.selectByPrimaryKey"/>
  </resultMap>
 
 <resultMap id="ResultMapForPage" type="com.linle.entity.sys.CTopic" extends="BaseResultMap">
    <result column="communityName" property="communityName" jdbcType="VARCHAR" />
    <result column="name" property="nickName" jdbcType="VARCHAR" />
     <result column="topic_type_name" property="topicTypeName" jdbcType="VARCHAR" />
    <result property="identity" column="identity" typeHandler="IntEnumTypeHandler"/>
     <result property="status" column="status"  typeHandler="IntEnumTypeHandler" />
    <collection column="folder_id" property="topicImages"  select="com.linle.system.mapper.SysFileMapper.findFilesUrlByFolderId" />
  </resultMap>
  
  <resultMap id="APIResultMap" type="com.linle.mobileapi.v1.model.CTopicVO">
  	<id column="topic_id" property="topicId" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="logo" property="userImg" jdbcType="VARCHAR" />
    <result column="communityName" property="communityName" jdbcType="VARCHAR" />
    <result column="name" property="nickName" jdbcType="VARCHAR" />
    <result column="topic_content" property="topicContent" jdbcType="VARCHAR" />
    <result column="sex" property="sex" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="support_num" property="supportNum" jdbcType="BIGINT" />
    <result column="comment_num" property="commentNum" jdbcType="BIGINT" />
    <result column="is_support" property="isSupport" jdbcType="BIT" />
     <result column="is_report" property="isReport" jdbcType="BIT" />
    <result column="identityId" property="identityId" />
    <collection column="folder_id" property="topicImages"  select="com.linle.system.mapper.SysFileMapper.findFilesUrlByFolderId" />
    <collection property="thumImages" column="folder_id" select="com.linle.system.mapper.SysFileMapper.findThumFilesUrlByFolderId" />
  </resultMap>
  
 
  
  <sql id="Base_Column_List" >
    topic_id, user_id, topic_content, folder_id, topic_type_id, support_num, comment_num, 
    price, create_time,is_top,is_del
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from c_topic
    where topic_id = #{topicId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from c_topic
    where topic_id = #{topicId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.linle.entity.sys.CTopic" >
    insert into c_topic (topic_id, user_id, topic_content, 
      folder_id, topic_type_id, support_num, 
      comment_num, price, create_time,is_top,is_del
      )
    values (#{topicId,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{topicContent,jdbcType=VARCHAR}, 
      #{folderId,jdbcType=BIGINT}, #{topicTypeId,jdbcType=BIGINT}, #{supportNum,jdbcType=BIGINT}, 
      #{commentNum,jdbcType=BIGINT}, #{price,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{isTop,jdbcType=INTEGER}, #{isDel,jdbcType=BIT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.linle.entity.sys.CTopic" >
    insert into c_topic
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="topicId != null" >
        topic_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="topicContent != null" >
        topic_content,
      </if>
      <if test="folderId != null" >
        folder_id,
      </if>
      <if test="topicTypeId != null" >
        topic_type_id,
      </if>
      <if test="supportNum != null" >
        support_num,
      </if>
      <if test="commentNum != null" >
        comment_num,
      </if>
      <if test="price != null" >
        price,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
       <if test="isTop != null" >
        is_top,
      </if>
       <if test="isDel != null" >
        is_del,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="topicId != null" >
        #{topicId,jdbcType=BIGINT},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="topicContent != null" >
        #{topicContent,jdbcType=VARCHAR},
      </if>
      <if test="folderId != null" >
        #{folderId,jdbcType=BIGINT},
      </if>
      <if test="topicTypeId != null" >
        #{topicTypeId,jdbcType=BIGINT},
      </if>
      <if test="supportNum != null" >
        #{supportNum,jdbcType=BIGINT},
      </if>
      <if test="commentNum != null" >
        #{commentNum,jdbcType=BIGINT},
      </if>
      <if test="price != null" >
        #{price,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
       <if test="isTop != null" >
        #{isTop,jdbcType=INTEGER},
      </if>
      <if test="isDel != null" >
         #{isDel,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.linle.entity.sys.CTopic" >
    update c_topic
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="topicContent != null" >
        topic_content = #{topicContent,jdbcType=VARCHAR},
      </if>
      <if test="folderId != null" >
        folder_id = #{folderId,jdbcType=BIGINT},
      </if>
      <if test="topicTypeId != null" >
        topic_type_id = #{topicTypeId,jdbcType=BIGINT},
      </if>
      <if test="supportNum != null" >
        support_num = #{supportNum,jdbcType=BIGINT},
      </if>
      <if test="commentNum != null" >
        comment_num = #{commentNum,jdbcType=BIGINT},
      </if>
      <if test="price != null" >
        price = #{price,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
       <if test="isTop != null" >
        is_top = #{isTop,jdbcType=INTEGER},
      </if>
       <if test="isDel != null" >
          is_del = #{isDel,jdbcType=INTEGER},
      </if>
    </set>
    where topic_id = #{topicId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.linle.entity.sys.CTopic" >
    update c_topic
    set user_id = #{userId,jdbcType=BIGINT},
      topic_content = #{topicContent,jdbcType=VARCHAR},
      folder_id = #{folderId,jdbcType=BIGINT},
      topic_type_id = #{topicTypeId,jdbcType=BIGINT},
      support_num = #{supportNum,jdbcType=BIGINT},
      comment_num = #{commentNum,jdbcType=BIGINT},
      price = #{price,jdbcType=VARCHAR},
      is_top = #{isTop,jdbcType=INTEGER},
      is_del = #{isDel,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where topic_id = #{topicId,jdbcType=BIGINT}
  </update>
  
   <select id="getAllData" parameterType="page" resultMap="ResultMapForPage">
	SELECT topic.*,type.topic_type_name,u.name,community.name communityName ,
	u.identity,report.count as reportCount ,u.status
		from c_topic topic
		LEFT JOIN c_topic_type type on type.topic_type_id=topic.topic_type_id
		LEFT JOIN ( SELECT topic_id,count(*) count  FROM c_topic_report  GROUP BY topic_id) report on topic.topic_id =report.topic_id 
		LEFT JOIN users u ON u.id=topic.user_id
		LEFT JOIN community community on community.id=u.community_id
		WHERE  (topic.is_del!=1 OR  ISNULL(topic.is_del)) 
		<if test="params.communityId!=null and params.communityId!=''">
<!-- 			and u.community_id=#{params.communityId} -->
			and (u.community_id=#{params.communityId} or (u.community_id is null and  u.identity=#{params.identityId})) 
		</if>
		<if test="params.userTypeId!=null and params.userTypeId==1">
			and u.identity!=4
		</if>
		<if test="params.userTypeId!=null and params.userTypeId==2">
			and u.identity=4
		</if>
		<if test="params.topicTypeId!=null and params.topicTypeId!=''">
			and topic.topic_type_id=#{params.topicTypeId}
		</if>
		<if test="params.isReport!=null and params.isReport==1">
			and report.count>0
		</if>
		<if test="params.isReport!=null and params.isReport==0">
			and (report.count=0 or report.count is null)
		</if>
		<if test="params.userName!=null and params.userName!=''">
			and u.name like CONCAT('%','${params.userName}','%')
		</if>
		<if test="params.beginDate!=null and params.beginDate!='' and params.endDate==null">
  			and <![CDATA[  DATE_FORMAT(topic.create_time,'%Y-%m-%d')>=#{params.beginDate} ]]>
  		</if>
  		<if test="params.beginDate==null and params.endDate!=null and  params.endDate!=''">
  			and <![CDATA[ DATE_FORMAT(topic.create_time,'%Y-%m-%d')<=#{params.endDate} ]]>
  		</if>
  		<if test="params.beginDate!=null and params.endDate!=null and params.beginDate!='' and  params.endDate!=''">
  			and <![CDATA[ (DATE_FORMAT(topic.create_time,'%Y-%m-%d') >=#{params.beginDate} and DATE_FORMAT(topic.create_time,'%Y-%m-%d')<=#{params.endDate}) ]]>
  		</if>
	 	ORDER BY is_top desc,topic.create_time desc,report.count desc
   </select>
   
  <!-- 获取某类型所有话题 -->
    <select id="getTopicListForApi" resultMap="APIResultMap" parameterType="map">
	  	SELECT topic.*,u.name,u.logo,u.sex,community.name communityName 
	  	,support.is_support,report.is_report,u.identity identityId
		from c_topic topic
		LEFT JOIN users u ON u.id=topic.user_id
		LEFT JOIN community community on community.id=u.community_id
		LEFT JOIN c_support support on support.topic_id =topic.topic_id and  support.user_id=#{userId}
		LEFT JOIN c_topic_report report on report.topic_id =topic.topic_id and  report.user_id=#{userId}
		WHERE topic.topic_type_id=#{typeId} and  (topic.is_del!=1 OR  ISNULL(topic.is_del))
		and (report.is_report!=1 or ISNULL(report.is_report))
		<if test="communityId!=null">
			and (u.community_id=#{communityId} or  ISNULL(u.community_id))
<!-- 			and (u.community_id=#{communityId} or (u.community_id is null and  u.identity=#{identityId}))  -->
		</if>
	  	ORDER BY topic.is_top desc , topic.create_time desc
	  	limit #{begin},#{end}
  </select>
  
  <!-- 获取某个话题对象 -->
  <select id="getTopicByTopicIdForApi" resultMap="APIResultMap" parameterType="map">
	  	SELECT topic.*,u.name,u.logo,u.sex,community.name communityName ,support.is_support,report.is_report,u.identity identityId
		from c_topic topic
		LEFT JOIN users u ON u.id=topic.user_id
		LEFT JOIN community community on community.id=u.community_id
		LEFT JOIN c_support support on support.topic_id =topic.topic_id and support.user_id=#{userId}
		LEFT JOIN c_topic_report report on report.topic_id =topic.topic_id and  report.user_id=#{userId}
		WHERE topic.topic_id=#{topicId} and  (topic.is_del!=1 OR  ISNULL(topic.is_del))
  </select>
  
  
    <!-- 获取某个人发布所有话题,知道当前用户是否点赞过该话题 查看那个人:toUserId  当前用户:userId-->
    <select id="getTopicListByUserIdForApi" resultMap="APIResultMap" parameterType="map">
	  	SELECT topic.*,u.name,u.logo,u.sex,community.name communityName ,support.is_support,report.is_report,u.identity identityId
		from c_topic topic
		LEFT JOIN users u ON u.id=topic.user_id
		LEFT JOIN community community on community.id=u.community_id
		LEFT JOIN c_support support on support.topic_id =topic.topic_id and  support.user_id=#{userId}
		LEFT JOIN c_topic_report report on report.topic_id =topic.topic_id and  report.user_id=#{userId}
		WHERE  topic.user_id=#{toUserId}  and (topic.is_del!=1 OR  ISNULL(topic.is_del))
	  	ORDER BY topic.is_top desc ,topic.create_time desc
	  	limit #{begin},#{end}
  </select>

</mapper>