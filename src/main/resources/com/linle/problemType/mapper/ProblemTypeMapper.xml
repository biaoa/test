<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.linle.problemType.mapper.ProblemTypeMapper" >
  <resultMap id="BaseResultMap" type="com.linle.problemType.model.ProblemType" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="type_name" property="typeName" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="belong_to" property="belongTo" jdbcType="INTEGER" />
    <result column="sort" property="sort" jdbcType="INTEGER" />
  </resultMap>
  
  <resultMap id="BaseResultMapApi" type="com.linle.problemType.model.ProblemType" >
     <result column="type_name" property="typeName" jdbcType="VARCHAR" />
     <collection property="commonProblemList" column="id" select="com.linle.commonProblem.mapper.CommonProblemMapper.selectByTypeId" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    id, type_name, status,belong_to, sort
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from problem_type
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from problem_type
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.linle.problemType.model.ProblemType" >
    insert into problem_type (id, type_name, status,belong_to, 
      sort)
    values (#{id,jdbcType=BIGINT}, #{typeName,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, 
       #{belongTo,jdbcType=INTEGER},#{sort,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.linle.problemType.model.ProblemType" >
    insert into problem_type
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="typeName != null" >
        type_name,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="belongTo != null" >
        belong_to,
      </if>
      <if test="sort != null" >
        sort,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="typeName != null" >
        #{typeName,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="belongTo != null" >
        #{belongTo,jdbcType=INTEGER},
      </if>
      <if test="sort != null" >
        #{sort,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.linle.problemType.model.ProblemType" >
    update problem_type
    <set >
      <if test="typeName != null" >
        type_name = #{typeName,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="belongTo != null" >
        belong_to = #{belongTo,jdbcType=INTEGER},
      </if>
      <if test="sort != null" >
        sort = #{sort,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.linle.problemType.model.ProblemType" >
    update problem_type
    set type_name = #{typeName,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      belong_to = #{belongTo,jdbcType=INTEGER},
      sort = #{sort,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
  
  <select id="getAllTypeAndData" resultMap="BaseResultMapApi" parameterType="map">
		select
		<include refid="Base_Column_List" />
		from problem_type
		<where>
			<if test="belongTo != null" >
		        belong_to = #{belongTo}
		    </if>	
		</where>
		order by sort
   </select>
   
   <select id="getAllType" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from problem_type
		order by belong_to,sort
   </select>
   
  <select id="getAllData" resultMap="BaseResultMap" parameterType="Page">
		select
		<include refid="Base_Column_List" />
		from problem_type
		<where>
			<if test="params.belongTo!=null and params.belongTo!=-1">
				and belong_to=#{params.belongTo}
			</if>
		</where>
	    order by belong_to,sort
  </select>
</mapper>